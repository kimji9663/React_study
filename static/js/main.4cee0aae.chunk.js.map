{"version":3,"sources":["components/Subject.js","components/TOC.js","components/Control.js","components/ReadContent.js","components/CreateContent.js","components/UpdateContent.js","App.js","serviceWorker.js","index.js"],"names":["Subject","console","log","href","onClick","e","preventDefault","this","props","onChangePage","bind","title","sub","Component","TOC","lists","data","i","length","push","key","id","data-id","target","dataset","Control","class","onChangeMode","type","value","ReadContent","desc","split","map","line","CreateContent","action","method","onSubmit","alert","name","placeholder","UpdateContent","state","inputFormHandler","setState","onChange","App","max_content_id","mode","selected_content_id","subject","welcome","contents","rellax","Rellax","_title","_desc","_article","_content","getReadContent","_contents","concat","_id","Array","from","className","style","transform","data-rellax-speed","Number","getContent","_mode","window","confirm","splice","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cee0aae.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Subject extends Component {\n  render() {\n    console.log('Subject render');\n    return (\n      <header>\n        <h1>\n          <a \n            href=\"/\" onClick={function(e){\n              e.preventDefault();\n              this.props.onChangePage();\n            }.bind(this)}\n            >\n            {this.props.title}\n          </a>\n        </h1>\n        <p>{this.props.sub}</p>\n      </header>\n    );\n  }\n}\n\nexport default Subject;","import React, { Component } from 'react';\n\nclass TOC extends Component {\n  render() {\n    console.log('TOC render');\n    var lists = [];\n    var data = this.props.data;\n    var i = 0;\n    while(i < data.length){\n      lists.push(\n      <li key={data[i].id}>\n        <a href={\"/content/\"+data[i].id}>\n          <span></span>\n          <strong\n            data-id={data[i].id}\n            onClick={function(e){\n              e.preventDefault();\n              this.props.onChangePage(e.target.dataset.id);\n            }.bind(this)}\n          >\n            {data[i].title}\n          </strong>\n        </a> \n      </li>);\n      i = i + 1;\n    }\n    return (\n      <nav>\n        <ul>\n          {lists}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default TOC;","import React, { Component } from 'react';\n\nclass Control extends Component {\n  render() {\n    console.log('Subject render');\n    return (\n      <div id=\"buttons\">\n        <ul>\n          <li class=\"create\"><a href=\"/create\" onClick={function(e){\n            e.preventDefault();\n            this.props.onChangeMode('create');\n          }.bind(this)}>create</a></li>\n          <li class=\"update\"><a href=\"/update\" onClick={function(e){\n            e.preventDefault();\n            this.props.onChangeMode('update');\n          }.bind(this)}>update</a></li>\n          <li class=\"delete\"><input type=\"button\" value=\"delete\" onClick={function(e){\n            e.preventDefault();\n            this.props.onChangeMode('delete');\n          }.bind(this)}></input></li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Control;","import React, { Component } from 'react';\n\nclass ReadContent extends Component {\n  render() {\n    console.log('Content render');\n    return (\n      <article id=\"primary\">\n        <h2>{this.props.title}</h2>\n        <p>\n            {\n            this.props.desc.split('\\n').map( line => {\n                return (<span>{line}<br/></span>)\n            })\n            }\n        </p>\n      </article>\n    );\n  }\n}\n\nexport default ReadContent;","import React, { Component } from 'react';\n\nclass CreateContent extends Component {\n  render() {\n    console.log('Content render');\n    return (\n      <article id=\"primary\">\n        <h2>Create</h2>\n        <form action=\"/create_process\" method=\"post\" \n        onSubmit={function(e){\n          e.preventDefault();\n          this.props.onSubmit(\n            e.target.title.value, // = e.target.elements[0].value\n            e.target.desc.value   // = e.target.elements[1].value\n          );\n          alert('Submit!!');\n        }.bind(this)}\n        >\n          <p><input type=\"text\" name=\"title\" placeholder=\"title\"></input></p>\n          <p>\n            <textarea name=\"desc\" placeholder=\"description\"></textarea>\n          </p>\n          <p><input type=\"submit\"></input></p>\n        </form>\n      </article>\n    );\n  }\n}\n\nexport default CreateContent;","import React, { Component } from 'react';\n\nclass UpdateContent extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      id:this.props.data.id,\n      title:this.props.data.title,\n      desc:this.props.data.desc\n    }\n    this.inputFormHandler = this.inputFormHandler.bind(this);\n  }\n  inputFormHandler(e){\n    this.setState({[e.target.name]:e.target.value});\n  }\n  render() {\n    //console.log(this.props.data);\n    console.log('Content render');\n    return (\n      <article id=\"primary\">\n        <h2>Update</h2>\n        <form action=\"/update_process\" method=\"post\" \n        onSubmit={function(e){\n          e.preventDefault();\n          this.props.onSubmit(\n            this.state.id,\n            this.state.title, // = e.target.title.value = e.target.elements[0].value\n            this.state.desc   // = e.target.desc.value = e.target.elements[1].value\n          );\n          alert('Submit!!');\n        }.bind(this)}\n        >\n          <input type=\"hidden\" name=\"id\" value={this.state.id}></input>\n          <p>\n            <input \n            type=\"text\" \n            name=\"title\" \n            placeholder=\"title\"\n            value={this.state.title}\n            onChange={this.inputFormHandler}\n            >\n            </input>\n          </p>\n          <p>\n            <textarea \n            name=\"desc\" \n            placeholder=\"description\" \n            value={this.state.desc} \n            onChange={this.inputFormHandler}\n            ></textarea>\n          </p>\n          <p><input type=\"submit\"></input></p>\n        </form>\n      </article>\n    );\n  }\n}\n\nexport default UpdateContent;","import React, { Component } from 'react';\nimport Subject from \"./components/Subject\"\nimport TOC from \"./components/TOC\"\nimport Control from './components/Control';\nimport ReadContent from \"./components/ReadContent\";\nimport CreateContent from \"./components/CreateContent\";\nimport UpdateContent from \"./components/UpdateContent\";\nimport Rellax from 'rellax';\nimport './css/App.css';\n\nclass App extends Component {\n  constructor(props){ //가장 먼저 실행되어 state를 초기화한다.\n    super(props);\n    this.max_content_id = 3;\n    this.state = {\n      mode:'welcome',\n      selected_content_id:2,\n      subject:{title:'To do list', sub:'What should I do today?'},\n      welcome:{title:'오늘 할일은?', desc:'계획적으로 살자.'},\n      contents:[{\n          id:1, \n          title:'마트가서 장보기', \n          desc: '* Shopping List\\n\\n사과 3개\\n밀가루 한 봉지\\n계란 한 판\\n올리브유\\n돼지고기 한 근'\n        },\n        {\n          id:2, \n          title:'자바스크립트 공부하기', \n          desc:'- 알고리즘 문제 풀기\\n\\n- 예제 따라서 풀어보기\\n\\n- 유튜브 강의듣기'\n        },\n        {id:3, \n          title:'친구랑 저녁 약속', \n          desc:'코로나 땜에 걱정되기는 하지만\\n마스크를 꼭 쓰고\\n사람 적은 동네에서 만나자.'\n        }\n      ]\n    }\n  }\n\n  componentDidMount() {\n    this.rellax = new Rellax('.rellax');\n  }\n\n  getReadContent(){\n    var i = 0;\n    while(i < this.state.contents.length){\n      var data = this.state.contents[i];\n      if(data.id === this.state.selected_content_id){\n        return data;\n        break;\n      }\n      i = i + 1;\n    }\n  }\n  getContent(){\n    var _title, _desc, _article, _content = null;\n    if(this.state.mode === 'welcome'){\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n      _article = <ReadContent title={_title} desc={_desc}></ReadContent>\n    } else if(this.state.mode === 'read'){\n      _content = this.getReadContent();\n      _article = <ReadContent title={_content.title} desc={_content.desc}></ReadContent>\n    } else if(this.state.mode === 'create'){\n      _article = <CreateContent onSubmit={function(_title, _desc){\n        //add content to this.state.contents\n        this.max_content_id = this.max_content_id+1;\n\n        // * push는 오리지널 데이터를 변경하므로 좋지않다.\n        // this.state.contents.push(\n        //   {id:this.max_content_id, title:_title, desc:_desc}\n        // );\n        \n        // * concat은 오리지널 데이터를 변경하지 않은 상태에 새로운 데이터를 추가한다. \n        var _contents = this.state.contents.concat( //새로운 데이터가 추가된 값을 새 변수에 담는다.\n          {id:this.max_content_id, title:_title, desc:_desc}\n        )\n        \n        this.setState({\n          //contents:this.state.contents\n          contents: _contents,\n          mode:'read',\n          selected_content_id:this.max_content_id\n        });\n      }.bind(this)}></CreateContent>\n    } else if(this.state.mode === 'update'){\n      _content = this.getReadContent();\n      _article = <UpdateContent data={_content} onSubmit={ // _content = {id: 2, title: \"CSS\", desc: \"CSS is for Design\"}\n      function(_id, _title, _desc){ //_content의 배열 순서대로 대입한다.\n        var _contents = Array.from(this.state.contents); // 기존의 데이터를 복제하여 새로운 배열을 만듦.\n        var i = 0;\n        while (i < _contents.length) {\n          if(_contents[i].id === _id){\n            _contents[i] = {id:_id, title:_title, desc:_desc};\n            break;\n          }\n          i = i + 1;\n        }\n        this.setState({\n          contents: _contents,\n          mode:'read'\n        });\n      }.bind(this)}></UpdateContent>\n    }\n    return _article;\n  }\n\n  render() {\n    console.log('App render');\n    return (\n      <div className=\"App\">\n        <div id=\"bg\"></div>\n        <div className=\"rellax square\" style={{transform: `rotate(45deg)`}} data-rellax-speed=\"4\"></div>\n        <div className=\"rellax ractangle\" style={{transform: `rotate(45deg)`}} data-rellax-speed=\"7\"></div>\n        <div className=\"rellax circle\" style={{transform: `rotate(45deg)`}} data-rellax-speed=\"1\"></div>\n        <div className=\"rellax square small\" style={{transform: `rotate(45deg)`}} data-rellax-speed=\"12\"></div>\n        <Subject \n          title={this.state.subject.title} \n          sub={this.state.subject.sub}\n          onChangePage={function(){\n            this.setState({mode:'welcome'});\n          }.bind(this)}\n        >\n        </Subject>\n        \n        <TOC \n          onChangePage={function(id){\n            this.setState({\n              mode:'read',\n              selected_content_id:Number(id)\n            });\n          }.bind(this)} \n          data={this.state.contents}\n        >\n        </TOC>\n\n        <main>\n          {this.getContent()}\n          <Control onChangeMode={function(_mode){\n            if(_mode === 'delete'){\n              if(window.confirm('really?')){\n                var _contents = Array.from(this.state.contents);\n                var i = 0;\n                while (i < this.state.contents.length) {\n                  if(_contents[i].id === this.state.selected_content_id){\n                    _contents.splice(i,1);\n                    break;\n                  }\n                  i = i + 1;\n                }\n                this.setState({\n                  mode:'welcome',\n                  contents:_contents\n                });\n                alert('deleted!')\n              }\n            } else {\n              this.setState({\n                mode:_mode\n            })\n          }\n          }.bind(this)}></Control>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import RellaxPage from './RellaxPage';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<RellaxPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}